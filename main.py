import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")  # –¢–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ .env —Ñ–∞–π–ª–∞

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://trh-dt.github.io/Oscuro_Tienda/index.html"))],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ],
    resize_keyboard=True
)

# Inline-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É)
shop_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://trh-dt.github.io/Oscuro_Tienda/index.html"))],
        [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"), InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Oscuro Tienda!", reply_markup=menu_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /shop (Inline-–∫–Ω–æ–ø–∫–∞)
@dp.message(Command("shop"))
async def shop(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Oscuro Tienda!", reply_markup=shop_inline_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer("üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/shop - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\n/help - –ü–æ–º–æ—â—å\n/contacts - –ö–æ–Ω—Ç–∞–∫—Ç—ã")

# –ö–æ–º–∞–Ω–¥–∞ /contacts
@dp.message(Command("contacts"))
async def contacts(message: types.Message):
    await message.answer("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nTelegram: @support\nInstagram: @oscurotienda")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    if callback.data == "catalog":
        await callback.message.answer("üì¶ –ö–∞—Ç–∞–ª–æ–≥: https://t.me/your_bot?start=shop")
    elif callback.data == "contacts":
        await callback.message.answer("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nTelegram: @support\nInstagram: @oscurotienda")

async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())